#!/usr/bin/python3
import requests
import configparser
import datetime
import dateutil.parser as parser
import calendar

def genEntry(obj):
    out = """
        <li>
            <span class="date"> {monthCode} <strong>{day}</strong></span>
            <h3><a href="{link}">{title}</a></h3>
            <p>{description}</p>
        </li>
    """
    args = {
        "description": obj["description"],
        "title": obj["summary"],
        "link": obj["htmlLink"]
    }

    args["monthCode"] = calendar.month_abbr[getEventDate(obj).month]
    args["day"] = getEventDate(obj).day
    return out.format(**args)

def filterEvents(obj, count=3):
    today = datetime.date.today()
    out = []
    for event in obj:
        eventDay = getEventDate(event)
        if today < eventDay:
            out.append(event)

        if len(out) == count:
            return out # We hit the number we want
    return out # We ran out, oop.

def getEventDate(obj):
    if "date" in obj["start"]:
        return parser.parse(obj["start"]["date"]).date()
    elif "dateTime" in obj["start"]:
        return parser.isoparse(obj["start"]["dateTime"]).date()
    raise ValueError("Got unexpected type: " + str(obj["start"]))

def getCalendarEvents(config):
    return requests.get("https://www.googleapis.com/calendar/v3/calendars/" \
            + config.get("DEFAULT", "calendar.id") + "/events" \
            + "?key=" + config.get("DEFAULT", "api.key")).json()

def getConfig():
    config = configparser.SafeConfigParser()
    config.read("../.properties") 
    return config

def main():
    config = getConfig()
    eventsResponse = getCalendarEvents(config)

    events = eventsResponse["items"]
    displayedEvents = filterEvents(events)
    print("<!-- AUTOGENERATED CALENDAR CONTENT -->")
    for event in displayedEvents:
        print(genEntry(event))
    print("<!-- END AUTOGENERATED CONTENT -->")

if __name__ == "__main__":
    main()
